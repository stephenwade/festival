generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Show {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String?
  startDate   String? // YYYY-MM-DDTHH:MM:SSZ
  timeZone    String

  backgroundColor          String?
  backgroundColorSecondary String?

  logoImageFile         ImageFile? @relation(name: "ShowLogoImageFile", fields: [logoImageFileId], references: [id])
  logoImageFileId       String?    @unique
  backgroundImageFile   ImageFile? @relation(name: "ShowBackgroundImageFile", fields: [backgroundImageFileId], references: [id])
  backgroundImageFileId String?    @unique

  sets Set[]
}

model Set {
  id     String  @id @default(uuid())
  artist String?
  offset Float?

  show   Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId String

  audioFile   AudioFile? @relation(fields: [audioFileId], references: [id])
  audioFileId String?    @unique
}

enum AudioFileConversionStatus {
  USER_UPLOAD
  CHECKING
  CONVERTING
  RE_UPLOAD
  DONE
  ERROR
}

model AudioFile {
  id       String @id @default(uuid())
  name     String
  url      String
  duration Float? // After conversion

  conversionStatus   AudioFileConversionStatus
  conversionProgress Float?
  errorMessage       String?

  set Set?
}

model ImageFile {
  id   String @id @default(uuid())
  name String
  url  String

  showLogo       Show? @relation(name: "ShowLogoImageFile")
  showBackground Show? @relation(name: "ShowBackgroundImageFile")
}

model AdminUserAllowlist {
  emailAddress String @unique
}
